= Attachinator

A little rails plugin to help you manage multiple file fields for a one_to_many association.

== Installation

	script/plugin install git://github.com/beaucollins/attachinator.git

== Usage 

Works like <tt>fields_for</tt> but creates a javascript control that allows for adding
additional <tt>file_field</tt> elements.

Basic usage example on an <tt>Album</tt> model that <tt>has_many :photos</tt> and a <tt>Photo</tt>
model that uses Paperclip to store uploaded file data in a <tt>file</tt> property
<tt>has_attached_file :photo</tt>:

  <%- form_for @album, :html => {:multipart => true} do |form| -%>
    <%= form.attachment_fields_for :photos, :file %>
  <%- end -%>

This will create an input field for every associated <tt>Photo</tt> model as well as a javascript
control that allows the user to add more file upload fields.

If your require more than an upload field you can supply a block like so:

  <%- form_for @album, :html => {:multipart => true} do |form| -%>
    <%- form.attachment_fields_for :photos, :html => {:multipart => true} do |attachment_fields| -%>
      <%= attachment_fields.label :name %>
      <%= attachment_fields.text_field :name %>
      <%= attachment_fields.file_field :file %>
    <%- end -%>
  <%- end -%>

All of the DOM nodes inside of the block will be cloned and properties updated accordingly (<tt>id</tt>,
<tt>name</tt>, and <tt>for</tt> attributes specifically).

Arguments:
* <tt>association</tt> - Symbol - the model's has_many association that will be receiving file uploads
* <tt>method</tt> - Symbol - the name of the method on the associated object that receives the file
  upload data
* <tt>options</tt> - Optional: Hash - see below for options
* <tt>field_for_options</tt> - Optional: Hash - passes this Hash as options for +fields_for+

Options:

* <tt>:include_add_new_field</tt> - Optional Include a link that adds a new set of fields via javascript -
  defaults to 'New #{method}'
* <tt>:new_objects</tt> - Optional number of new objects to build for the association, defaults to 1
* <tt>:wrapper_class</tt> - Optional class name to use for the div that will wrap each object's fields
* <tt>:js_lib</tt> - Optional javascript library to use. Defaults to <tt>:prototype</tt> but also supports
  <tt>:jquery</tt> no other libraries currently supported

== Assumptions

This plugin fits a very specific use case. It assumes you have a model with a <tt>has_many</tt> association
to a model that has a property expecting an uploaded file. The javascript also requires the Prototype library.

	# app/models/album.rb
	class Album < ActiveRecord::Base
		has_many :photos
		accepts_nested_attributes_for :photos
	end

	# app/models/photo.rb
	class Photo < ActiveRecord::Base
		belongs_to :album
		has_attached_file :data # this supplied by Paperclip
	end

	# app/views/models/new.html.erb
	<%- form_for @album do |f| -%>
		<%= f.attachment_fields_for :photos, :data %>
	<%- end -%>

== Todo

* Fire a custom event in javascript when fields are added to the form
* Support jQuery

Copyright (c) 2009 Beau Collins, released under the MIT license
